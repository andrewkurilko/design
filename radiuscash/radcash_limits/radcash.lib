#!/bin/bash

QUERY_TO_SQL (){
SQL=`mysql -D $DB_NAME -u $DB_USER -p$DB_PASSWORD -e "$QUERY" 2>/dev/null`
}

CUT_SQL (){
SQL=${SQL:$CUT:${#SQL}}
}

FUNC_MAX_UID (){
QUERY="SELECT MAX( uid ) FROM users"
QUERY_TO_SQL
CUT=11
CUT_SQL
MAX_UID=$SQL
}

FUNC_MAX_GID (){
QUERY="SELECT MAX( gid ) FROM packets"
QUERY_TO_SQL
CUT=11
CUT_SQL
MAX_GID=$SQL
}

UID_TO_USERS (){
FUNC_MAX_GID

for (( i=0; i <= $MAX_GID; i++ ))
do
QUERY="SELECT razresh_minus FROM packets WHERE gid=$i"
QUERY_TO_SQL
CUT=14
CUT_SQL
# Debug
# echo -e "\e[1;32m \n Тариф $i \n Разрешенный минус $SQL \e[0m"
QUERY="SELECT uid FROM users WHERE blocked=0 and gid=$i and (deposit+credit)>=-$SQL"
QUERY_TO_SQL
CUT=4
CUT_SQL
# Debug
# echo $SQL
USERS="$USERS $SQL"
done
}

FUNC_CHECK_ID () {
QUERY="SELECT gid FROM users WHERE uid=$ID"
QUERY_TO_SQL
GID=$(echo $SQL | awk '{print $2}')
QUERY="SELECT razresh_minus FROM packets WHERE gid=$GID"
QUERY_TO_SQL
RAZRESH_MINUS=$(echo $SQL | awk '{print $2}')
QUERY="SELECT uid FROM users WHERE uid=$ID and blocked=0 and (deposit+credit)>=-$RAZRESH_MINUS"
QUERY_TO_SQL
CHECK_ID=$SQL
}

FUNC_HOTSPOT (){
AuthorizationType=Hotspot
echo >$MAC_TMP
for ID in $USERS; do
QUERY="SELECT local_mac FROM users WHERE uid=$ID"
QUERY_TO_SQL
MAC=$(echo $SQL | awk '{print $2}')

if [[ $MAC != NULL && $MAC != "" ]]
then

if ! grep -qx $MAC $MAC_TMP
then
QUERY="SELECT local_ip FROM users WHERE uid=$ID"
QUERY_TO_SQL
IPADDR=$(echo $SQL | awk '{print $2}')
Func_Gid
echo "add customer=admin username=$MAC ip-address=$IPADDR" >>$UPLOAD
echo "create-and-activate-profile profile=$GID "'"'$MAC'" customer=admin' >>$UPLOAD
echo $MAC >>$MAC_TMP
fi

fi

done
}


FUNC_HOTSPOT_ID (){
AuthorizationType=Hotspot
QUERY="SELECT local_mac FROM users WHERE uid=$ID"
QUERY_TO_SQL
MAC=$(echo $SQL | awk '{print $2}')

if [[ $MAC != NULL && $MAC != "" ]]
then

if ! grep -qx $MAC $MAC_TMP
then
QUERY="SELECT local_ip FROM users WHERE uid=$ID"
QUERY_TO_SQL
IPADDR=$(echo $SQL | awk '{print $2}')
Func_Gid_ID
echo "add customer=admin username=$MAC ip-address=$IPADDR" >>$UPLOAD
echo "create-and-activate-profile profile=$GID "'"'$MAC'" customer=admin' >>$UPLOAD
echo $MAC >>$MAC_TMP
fi

fi
}


FUNC_PPP (){
AuthorizationType=PPP
for ID in $USERS; do
QUERY="SELECT password FROM users WHERE uid=$ID"
QUERY_TO_SQL
PASSWORD=$(echo $SQL | awk '{print $2}')

if [[ $PASSWORD != NULL && $PASSWORD != "" ]]
then
QUERY="SELECT user, framed_ip FROM users WHERE uid=$ID"
QUERY_TO_SQL
USER=$(echo $SQL | awk '{print $3}')
IPADDR=$(echo $SQL | awk '{print $4}')
Func_Gid
echo "add customer=admin username=$USER password=$PASSWORD ip-address=$IPADDR" >>$UPLOAD
echo "create-and-activate-profile profile=$GID "'"'$USER'" customer=admin' >>$UPLOAD
fi

done
}


FUNC_PPP_ID (){
AuthorizationType=PPP
QUERY="SELECT password FROM users WHERE uid=$ID"
QUERY_TO_SQL
PASSWORD=$(echo $SQL | awk '{print $2}')

if [[ $PASSWORD != NULL && $PASSWORD != "" ]]
then
QUERY="SELECT user, framed_ip FROM users WHERE uid=$ID"
QUERY_TO_SQL
USER=$(echo $SQL | awk '{print $3}')
IPADDR=$(echo $SQL | awk '{print $4}')
Func_Gid_ID
echo "add customer=admin username=$USER password=$PASSWORD ip-address=$IPADDR" >>$UPLOAD
echo "create-and-activate-profile profile=$GID "'"'$USER'" customer=admin' >>$UPLOAD
fi
}


Func_Gid ()
{
QUERY="SELECT speed_rate, speed_burst FROM users WHERE uid=$ID"
QUERY_TO_SQL
Speed_Rate=$(echo $SQL | awk '{print $3}')
Speed_Burst=$(echo $SQL | awk '{print $4}')
if [ "$Speed_Rate" -ne "0" -a "$Speed_Burst"  -ne "0" ]
then
GID=$AuthorizationType$ID
echo "/tool user-manager profile limitation add name=$GID owner=admin rate-limit-rx=$Speed_Rate"k" rate-limit-tx=$Speed_Burst"k"" >>$UPLOAD
echo "/tool user-manager profile add name=$GID owner=admin" >>$UPLOAD
echo "/tool user-manager profile profile-limitation add profile=$GID limitation=$GID" >>$UPLOAD

else
QUERY="SELECT gid FROM users WHERE uid=$ID"
QUERY_TO_SQL
GID=$(echo $SQL | awk '{print $2}')
fi
}


Func_Gid_ID ()
{
QUERY="SELECT speed_rate, speed_burst FROM users WHERE uid=$ID"
QUERY_TO_SQL
Speed_Rate=$(echo $SQL | awk '{print $3}')
Speed_Burst=$(echo $SQL | awk '{print $4}')
if [ "$Speed_Rate" -ne "0" -a "$Speed_Burst"  -ne "0" ]
then
GID=$AuthorizationType$ID
echo "/tool user-manager profile limitation add name=$GID owner=admin rate-limit-rx=$Speed_Rate"k" rate-limit-tx=$Speed_Burst"k"" >>$UPLOAD
echo "/tool user-manager profile add name=$GID owner=admin" >>$UPLOAD
echo "/tool user-manager profile profile-limitation add profile=$GID limitation=$GID" >>$UPLOAD
fi
}


SSH_UPLOAD ()
{
for (( i=0;i!=$CONNECT_SUM;i++ )); do

scp -P $USERMAN_SSH_PORT $UPLOAD $USERMAN_LOGIN@$USERMAN_IP:/
STATUS=$?
if [ $STATUS -ne 0 ]; then
sleep $CONNECT_INTERVAL
else

CMD="/import file=$(basename $UPLOAD)"
for (( i=0;i!=$CONNECT_SUM;i++ )); do
ssh -p $USERMAN_SSH_PORT $USERMAN_LOGIN@$USERMAN_IP "${CMD}" > /dev/null
STATUS=$?
if [ $STATUS -ne 0 ]; then
sleep $CONNECT_INTERVAL
else
exit
fi


done
fi

done
}
